// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System;
using WanwanLand.Slayer.Domain.Asset.Addresses;
using WanwanLand.Slayer.Domain.Asset.SpriteSheets;
using Slayer.Runtime.Domain.Generated.Tables;

namespace Slayer.Runtime.Domain.Generated
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<SpriteSheet> data)
        {
            var newData = CloneAndSortBy(data, x => x.SpriteSheetId, System.Collections.Generic.Comparer<int>.Default);
            var table = new SpriteSheetTable(newData);
            memory = new MemoryDatabase(
                table
            
            );
        }

        public void RemoveSpriteSheet(int[] keys)
        {
            var data = RemoveCore(memory.SpriteSheetTable.GetRawDataUnsafe(), keys, x => x.SpriteSheetId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.SpriteSheetId, System.Collections.Generic.Comparer<int>.Default);
            var table = new SpriteSheetTable(newData);
            memory = new MemoryDatabase(
                table
            
            );
        }

        public void Diff(SpriteSheet[] addOrReplaceData)
        {
            var data = DiffCore(memory.SpriteSheetTable.GetRawDataUnsafe(), addOrReplaceData, x => x.SpriteSheetId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.SpriteSheetId, System.Collections.Generic.Comparer<int>.Default);
            var table = new SpriteSheetTable(newData);
            memory = new MemoryDatabase(
                table
            
            );
        }

    }
}